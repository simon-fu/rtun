syntax = "proto3";
package rtun.pb;

// enum Version {
//     VER_RESERVED = 0;
//     VER_1 = 1;
// }

// enum DeviceType {
//     DEV_RESERVED = 0;
//     DEV_AGENT = 1;
//     DEV_CLIENT = 2;
// }

// message HanshakeRequestPacket {
//     Version version             = 1;
//     DeviceType device_type      = 2;
//     uint64  nonce               = 3;
// }

// message HanshakeResponsePacket {
//     uint64  nonce               = 1;
// }

message ServerHi {
    uint64  ch_id                       = 1; // ctrl channel id
}

message RawPacket {
    uint64  ch_id                       = 1;
    bytes payload                       = 2;
}

// client -> agent request
message C2ARequest {
    oneof c2a_req_args {
        OpenShellArgs open_sell         = 1;
        OpenSocksArgs open_socks        = 2;
        CloseChannelArgs close_channel  = 3;
        Ping ping                       = 4;
        KickDownArgs kick_down          = 5;
        OpenP2PArgs open_p2p            = 6;
    }
}

// // client <- agent request
// message C2AResponse {
//     int32 status                        = 1;
//     string reason                       = 2;
// }

message Ping  {
    int64 timestamp                     = 1;
}

message Pong  {
    int64 timestamp                     = 1;
}

message OpenShellArgs  {
    optional uint64 ch_id               = 1;
    ProgramArgs program_args            = 2;
    uint32 cols                         = 3; 
    uint32 rows                         = 4;
    // string term = 5; // "xterm-256color"
}

message ProgramArgs {
    uint32 cols                         = 1;
    uint32 rows                         = 2;
    map<string, string> env_vars        = 3;
}

message OpenSocksArgs  {
    optional uint64 ch_id               = 1;
    string peer_addr                    = 2;
}

message CloseChannelArgs  {
    uint64 ch_id                        = 1;
}

message P2PArgs  {
    string ufrag                        = 1;
    // string addr                         = 2;
    string pwd                          = 2;
    repeated string candidates          = 3;
    optional string cert_fingerprint    = 4;
}

message OpenP2PArgs  {
    P2PArgs args                        = 1;
    oneof tun_args {
        ThroughputArgs throughput       = 2;
    }
    uint32 ptype                        = 3;
}

message ThroughputArgs {
    uint32 send_buf_size                = 1;
    uint32 recv_buf_size                = 2;
}


message OpenP2PResponse {
    oneof open_p2p_rsp {
        P2PArgs args                    = 1;
        ResponseStatus status           = 2;
    }
}

message OpenChannelRequest {
    oneof open_ch_req {
        uint64 ch_id                    = 1; // request channel id
    }
}

message OpenChannelResponse {
    oneof open_ch_rsp {
        uint64 ch_id                    = 1; // allocated channel id
        ResponseStatus status           = 2;
    }
}

message ResponseStatus {
    int32 code                          = 1;
    string reason                       = 2;
}

message KickDownArgs {
    int32 code                          = 1;
    string reason                       = 2;
}

// c -> a
message PtyInputPacket{
    oneof pty_input_args {
        ShutdownArgs shutdown           = 1;
        bytes stdin_data                = 2;
        PtyResizeArgs resize            = 3;
    }
}

message PtyResizeArgs {
    uint32 cols                         = 1;
    uint32 rows                         = 2;
}

// c <- a
message PtyOutputPacket{
    oneof pty_output_args {
        ShutdownArgs shutdown           = 1;
        bytes stdout_data               = 2;
    }
}

message ShutdownArgs {
    int32 code                          = 1;
}

// message ShellArgs {

// }

// message AgentServerInPacket {
//     oneof agent_server_in {
//         OpenChannel open_channel        = 1;
//         ChannelData ch_data             = 2;
//     }
// }

// message OpenChannel {
//     uint64  ch_id                       = 1;
//     oneof channel_arg {
//         ShellArgs sell_args             = 2;
//     }
// }



// message AgentClientOutPacket {
//     oneof agent_client_out {
//         ChannelData ch_data = 1;
//     }
// }

// message ChannelData {
//     uint64  ch_id               = 1;
//     bytes payload               = 2;
// }







// message RequestHanshake {
//     Version version = 1;
//     DeviceType device_type = 2;
// }

